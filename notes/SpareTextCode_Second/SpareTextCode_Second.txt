//--------------------obj_Text: Create Event---------------------------------//

//The distance the textbox is from the edge of the screen
TextBox_EdgeMargin = 10;

//The width and height of the text box
TextBox_Width = 1980 - TextBox_EdgeMargin * 2;
TextBox_Height = 360 - TextBox_EdgeMargin * 1; 

//The Text displayed by the textbox
TextBox_Text = "default";

//The height of the text
TextBox_TextHeight = string_height(TextBox_Text) * 1.2;

//The page the text is on
TextBox_Page = 0;

//The number of characters displayed
TextBox_CharCount = 0;

//The rate the characters appear at
TextBox_CharIncrease = 1;

//The location of the text box on the GUI
TextBox_X = TextBox_EdgeMargin;
TextBox_Y = 1080 - TextBox_Height - TextBox_EdgeMargin;

//The minimum distance the text can be from the textbox
TextBox_BorderBuffer = 30;
TextBox_BufferX = TextBox_BorderBuffer;
TextBox_BufferY = TextBox_BorderBuffer;

TextBox_TextWidth = TextBox_Width - (TextBox_BufferX * 2);

TextBox_BoxSprite = spr_TextBox;
TextBox_TextColor = c_black;
TextBox_Font = ft_NPC;

//--------------------obj_Text: Step Event---------------------------------//

//If the talk button is pressed
if (mouse_check_button_pressed(mb_right))
{
	//If there is another page of text to display, move to the next page
	if (TextBox_Page + 1 < array_length(TextBox_Text)){
		TextBox_Page++;
		TextBox_CharCount = 0;
	}
	//If the dialogue is finished
	else
	{
		instance_destroy(); //Destroy the text object
		//Give the player control back
		with (obj_Player)
		{
			hascontrol = true;
		}
		obj_Camera.follow = obj_Player;
		with (obj_NPC)
		{
			alarm[1] = 1;
			NPC_CanFloat = PauseFloat;
			walkspeed = PauseRun;
			TalkedTo++;
		}
	}
	
}

//--------------------obj_Text: Draw GUI Event---------------------------------//

draw_sprite_stretched(TextBox_BoxSprite, 0, TextBox_X, TextBox_Y, TextBox_Width, TextBox_Height); 

DrawSetText(TextBox_TextColor, TextBox_Font, fa_left, fa_top);

if (TextBox_CharCount < string_length(TextBox_Text[TextBox_Page]))
{
	TextBox_CharCount += TextBox_CharIncrease;
}

TextBox_TextSect = string_copy(TextBox_Text[TextBox_Page], 1, TextBox_CharCount); 

draw_text_ext(TextBox_X + TextBox_BufferX, TextBox_Y + TextBox_BufferY, TextBox_TextSect, TextBox_TextHeight * 2, TextBox_TextWidth);

//--------------------obj_NPC: Step Event---------------------------------//

#region Text 

//If the player is present
if (instance_exists(obj_Player))
{

	//If the player is within talking range
	if (point_in_circle(obj_Player.x, obj_Player.y, x, y, TalkRange)) 
	{
	
		//If the player talks to the NPC with the talk button
		if (mouse_check_button_pressed(mb_right)){
		
			//If a textbox hasn't been created yet
			if (myTextbox = noone)
			{
				
				with (obj_Player)
				{
					hascontrol = false;
				}
				
				//Create a new textbox 
				myTextbox = instance_create_depth(x, y, -999, obj_TextBox);
				
				//Access tthe new textbox
				with (myTextbox)
				{
					//Set the text to be the NPC's Speech
					TextBox_Text = other.Speech;
					
					//If the NPC has a name, add the name to their speech
					if (other.Name != "" && other.NameInserted == false) 
					{
						for (var i = 0; i < array_length(TextBox_Text); i++)
						{
							TextBox_Text[i] = other.Name + ": " + TextBox_Text[i];
						}
						other.NameInserted = true;
						
					}//end if NPC has name
					
				}//end access textbox
				
				//Have the camera follow the NPC
				with (obj_Camera)
				{
					follow = other.id;
				}
				
			}//if a textbox hasn't been created
		
		}//end mouse right button pressed
	
	}//end if nearby

	//If the player isnt in talking range
	else 
	{
		if (myTextbox != noone)
		{
			instance_destroy(myTextbox);
			myTextbox = noone;
			obj_Camera.follow = obj_Player;
			obj_Player.hascontrol = true;
		}
	
		NPC_CanFloat = PauseFloat;
	
	}

}

#endregion